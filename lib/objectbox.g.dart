// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/weather_info/domain/entities/weather_local_info_response_entity/clouds_local_entity.dart';
import 'features/weather_info/domain/entities/weather_local_info_response_entity/coordinate_local_entity.dart';
import 'features/weather_info/domain/entities/weather_local_info_response_entity/main_weather_info_local_entity.dart';
import 'features/weather_info/domain/entities/weather_local_info_response_entity/sunset_sunrise_local_entity.dart';
import 'features/weather_info/domain/entities/weather_local_info_response_entity/weather_description_local_entity.dart';
import 'features/weather_info/domain/entities/weather_local_info_response_entity/weather_local_info_entity.dart';
import 'features/weather_info/domain/entities/weather_local_info_response_entity/weather_theme_local_entity.dart';
import 'features/weather_info/domain/entities/weather_local_info_response_entity/wind_info_local_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6880007904931586657),
      name: 'CloudsLocalEntity',
      lastPropertyId: const IdUid(2, 412756344256516116),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2949878487885422668),
            name: 'all',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 412756344256516116),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 3461254210854617767),
      name: 'CoordinateLocalEntity',
      lastPropertyId: const IdUid(3, 5087402477027980399),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4300623707401903235),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5079107962356621047),
            name: 'lon',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5087402477027980399),
            name: 'lat',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 9192336508330026828),
      name: 'MainWeatherInfoLocalEntity',
      lastPropertyId: const IdUid(7, 9165181845112548066),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4298114905731753084),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5026349606310493349),
            name: 'temp',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5240301424725549896),
            name: 'feelsLike',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4305099678241748933),
            name: 'tempMin',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5862299152361159873),
            name: 'tempMax',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 293333133141988668),
            name: 'pressure',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 9165181845112548066),
            name: 'humidity',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 6241373764159141860),
      name: 'SunsetSunriseLocalEntity',
      lastPropertyId: const IdUid(5, 6291010900849653715),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7852074505021439852),
            name: 'type',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 3386216093346565803),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 9057616120145976128),
            name: 'country',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4980521017912740391),
            name: 'sunrise',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6291010900849653715),
            name: 'sunset',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 2646356980437107104),
      name: 'WeatherDescriptionLocalEntity',
      lastPropertyId: const IdUid(4, 3920029365622128158),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7958998890392977809),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 185151375142886630),
            name: 'main',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2110290469239205967),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3920029365622128158),
            name: 'icon',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 1808611098615804373),
      name: 'WeatherInfoLocalEntity',
      lastPropertyId: const IdUid(13, 8985474808027619856),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(3, 6394657301755561811),
            name: 'mainId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 8514966264585192641),
            relationTarget: 'MainWeatherInfoLocalEntity'),
        ModelProperty(
            id: const IdUid(4, 5042431272608119124),
            name: 'visibility',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1778835125343500197),
            name: 'windId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 2884523745363737944),
            relationTarget: 'WindInfoLocalEntity'),
        ModelProperty(
            id: const IdUid(6, 3533506375304101950),
            name: 'cloudsId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 6619021802334768840),
            relationTarget: 'CloudsLocalEntity'),
        ModelProperty(
            id: const IdUid(7, 1373125539525332389),
            name: 'dt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7779962110016077875),
            name: 'sysId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 484075559269616283),
            relationTarget: 'SunsetSunriseLocalEntity'),
        ModelProperty(
            id: const IdUid(9, 8208836753316543947),
            name: 'timezone',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8008230289145083908),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(11, 2510677696552961634),
            name: 'name',
            type: 9,
            flags: 34848,
            indexId: const IdUid(9, 5388851329022072792)),
        ModelProperty(
            id: const IdUid(13, 8985474808027619856),
            name: 'weatherThemeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 3328818796529849563),
            relationTarget: 'WeatherThemeLocalEntity')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 4281757949125416941),
            name: 'weather',
            targetId: const IdUid(5, 2646356980437107104))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 3962831592385967162),
      name: 'WindInfoLocalEntity',
      lastPropertyId: const IdUid(3, 282724855969962684),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6938484251426828505),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5481480834145518703),
            name: 'speed',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 282724855969962684),
            name: 'deg',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 8827388458182144762),
      name: 'WeatherThemeLocalEntity',
      lastPropertyId: const IdUid(5, 8312217297488952861),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2352114334661212234),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(4, 8325933891333312625),
            name: 'firstColorHex',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8312217297488952861),
            name: 'secondColorHex',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(8, 8827388458182144762),
      lastIndexId: const IdUid(9, 5388851329022072792),
      lastRelationId: const IdUid(1, 4281757949125416941),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [
        3578032260382545551,
        234992684515061082,
        8226802502953832989
      ],
      retiredPropertyUids: const [
        8185252375108885606,
        5586747036336351195,
        1093966185179143489,
        1991451046200193590,
        7236989518563952867
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    CloudsLocalEntity: EntityDefinition<CloudsLocalEntity>(
        model: _entities[0],
        toOneRelations: (CloudsLocalEntity object) => [],
        toManyRelations: (CloudsLocalEntity object) => {},
        getId: (CloudsLocalEntity object) => object.id,
        setId: (CloudsLocalEntity object, int id) {
          object.id = id;
        },
        objectToFB: (CloudsLocalEntity object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.all);
          fbb.addInt64(1, object.id ?? 0);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final allParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final object = CloudsLocalEntity(all: allParam, id: idParam);

          return object;
        }),
    CoordinateLocalEntity: EntityDefinition<CoordinateLocalEntity>(
        model: _entities[1],
        toOneRelations: (CoordinateLocalEntity object) => [],
        toManyRelations: (CoordinateLocalEntity object) => {},
        getId: (CoordinateLocalEntity object) => object.id,
        setId: (CoordinateLocalEntity object, int id) {
          object.id = id;
        },
        objectToFB: (CoordinateLocalEntity object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addFloat64(1, object.lon);
          fbb.addFloat64(2, object.lat);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lonParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final latParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final object =
              CoordinateLocalEntity(lon: lonParam, lat: latParam, id: idParam);

          return object;
        }),
    MainWeatherInfoLocalEntity: EntityDefinition<MainWeatherInfoLocalEntity>(
        model: _entities[2],
        toOneRelations: (MainWeatherInfoLocalEntity object) => [],
        toManyRelations: (MainWeatherInfoLocalEntity object) => {},
        getId: (MainWeatherInfoLocalEntity object) => object.id,
        setId: (MainWeatherInfoLocalEntity object, int id) {
          object.id = id;
        },
        objectToFB: (MainWeatherInfoLocalEntity object, fb.Builder fbb) {
          final tempOffset =
              object.temp == null ? null : fbb.writeString(object.temp!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, tempOffset);
          fbb.addFloat64(2, object.feelsLike);
          fbb.addFloat64(3, object.tempMin);
          fbb.addFloat64(4, object.tempMax);
          fbb.addInt64(5, object.pressure);
          fbb.addInt64(6, object.humidity);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final tempParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final feelsLikeParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final tempMinParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 10);
          final tempMaxParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 12);
          final pressureParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final humidityParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final object = MainWeatherInfoLocalEntity(
              temp: tempParam,
              feelsLike: feelsLikeParam,
              tempMin: tempMinParam,
              tempMax: tempMaxParam,
              pressure: pressureParam,
              humidity: humidityParam,
              id: idParam);

          return object;
        }),
    SunsetSunriseLocalEntity: EntityDefinition<SunsetSunriseLocalEntity>(
        model: _entities[3],
        toOneRelations: (SunsetSunriseLocalEntity object) => [],
        toManyRelations: (SunsetSunriseLocalEntity object) => {},
        getId: (SunsetSunriseLocalEntity object) => object.id,
        setId: (SunsetSunriseLocalEntity object, int id) {
          object.id = id;
        },
        objectToFB: (SunsetSunriseLocalEntity object, fb.Builder fbb) {
          final countryOffset =
              object.country == null ? null : fbb.writeString(object.country!);
          final sunriseOffset =
              object.sunrise == null ? null : fbb.writeString(object.sunrise!);
          final sunsetOffset =
              object.sunset == null ? null : fbb.writeString(object.sunset!);
          fbb.startTable(6);
          fbb.addInt64(0, object.type);
          fbb.addInt64(1, object.id ?? 0);
          fbb.addOffset(2, countryOffset);
          fbb.addOffset(3, sunriseOffset);
          fbb.addOffset(4, sunsetOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final typeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final countryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final sunriseParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final sunsetParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = SunsetSunriseLocalEntity(
              type: typeParam,
              id: idParam,
              country: countryParam,
              sunrise: sunriseParam,
              sunset: sunsetParam);

          return object;
        }),
    WeatherDescriptionLocalEntity:
        EntityDefinition<WeatherDescriptionLocalEntity>(
            model: _entities[4],
            toOneRelations: (WeatherDescriptionLocalEntity object) => [],
            toManyRelations: (WeatherDescriptionLocalEntity object) => {},
            getId: (WeatherDescriptionLocalEntity object) => object.id,
            setId: (WeatherDescriptionLocalEntity object, int id) {
              object.id = id;
            },
            objectToFB: (WeatherDescriptionLocalEntity object, fb.Builder fbb) {
              final mainOffset =
                  object.main == null ? null : fbb.writeString(object.main!);
              final descriptionOffset = object.description == null
                  ? null
                  : fbb.writeString(object.description!);
              final iconOffset =
                  object.icon == null ? null : fbb.writeString(object.icon!);
              fbb.startTable(5);
              fbb.addInt64(0, object.id ?? 0);
              fbb.addOffset(1, mainOffset);
              fbb.addOffset(2, descriptionOffset);
              fbb.addOffset(3, iconOffset);
              fbb.finish(fbb.endTable());
              return object.id ?? 0;
            },
            objectFromFB: (Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final idParam = const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4);
              final mainParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6);
              final descriptionParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGetNullable(buffer, rootOffset, 8);
              final iconParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
              final object = WeatherDescriptionLocalEntity(
                  id: idParam,
                  main: mainParam,
                  description: descriptionParam,
                  icon: iconParam);

              return object;
            }),
    WeatherInfoLocalEntity: EntityDefinition<WeatherInfoLocalEntity>(
        model: _entities[5],
        toOneRelations: (WeatherInfoLocalEntity object) => [
              object.main,
              object.wind,
              object.clouds,
              object.sys,
              object.weatherTheme
            ],
        toManyRelations: (WeatherInfoLocalEntity object) => {
              RelInfo<WeatherInfoLocalEntity>.toMany(1, object.id!):
                  object.weather
            },
        getId: (WeatherInfoLocalEntity object) => object.id,
        setId: (WeatherInfoLocalEntity object, int id) {
          object.id = id;
        },
        objectToFB: (WeatherInfoLocalEntity object, fb.Builder fbb) {
          final visibilityOffset = object.visibility == null
              ? null
              : fbb.writeString(object.visibility!);
          final dtOffset =
              object.dt == null ? null : fbb.writeString(object.dt!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(14);
          fbb.addInt64(2, object.main.targetId);
          fbb.addOffset(3, visibilityOffset);
          fbb.addInt64(4, object.wind.targetId);
          fbb.addInt64(5, object.clouds.targetId);
          fbb.addOffset(6, dtOffset);
          fbb.addInt64(7, object.sys.targetId);
          fbb.addInt64(8, object.timezone);
          fbb.addInt64(9, object.id ?? 0);
          fbb.addOffset(10, nameOffset);
          fbb.addInt64(12, object.weatherTheme.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final visibilityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final dtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final timezoneParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final object = WeatherInfoLocalEntity(
              visibility: visibilityParam,
              dt: dtParam,
              timezone: timezoneParam,
              id: idParam,
              name: nameParam);
          object.main.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.main.attach(store);
          object.wind.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.wind.attach(store);
          object.clouds.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.clouds.attach(store);
          object.sys.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.sys.attach(store);
          object.weatherTheme.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.weatherTheme.attach(store);
          InternalToManyAccess.setRelInfo<WeatherInfoLocalEntity>(
              object.weather,
              store,
              RelInfo<WeatherInfoLocalEntity>.toMany(1, object.id!));
          return object;
        }),
    WindInfoLocalEntity: EntityDefinition<WindInfoLocalEntity>(
        model: _entities[6],
        toOneRelations: (WindInfoLocalEntity object) => [],
        toManyRelations: (WindInfoLocalEntity object) => {},
        getId: (WindInfoLocalEntity object) => object.id,
        setId: (WindInfoLocalEntity object, int id) {
          object.id = id;
        },
        objectToFB: (WindInfoLocalEntity object, fb.Builder fbb) {
          final speedOffset =
              object.speed == null ? null : fbb.writeString(object.speed!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, speedOffset);
          fbb.addInt64(2, object.deg);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final speedParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final degParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final object = WindInfoLocalEntity(
              speed: speedParam, deg: degParam, id: idParam);

          return object;
        }),
    WeatherThemeLocalEntity: EntityDefinition<WeatherThemeLocalEntity>(
        model: _entities[7],
        toOneRelations: (WeatherThemeLocalEntity object) => [],
        toManyRelations: (WeatherThemeLocalEntity object) => {},
        getId: (WeatherThemeLocalEntity object) => object.id,
        setId: (WeatherThemeLocalEntity object, int id) {
          object.id = id;
        },
        objectToFB: (WeatherThemeLocalEntity object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(3, object.firstColorHex);
          fbb.addInt64(4, object.secondColorHex);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final firstColorHexParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final secondColorHexParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final object = WeatherThemeLocalEntity(
              firstColorHex: firstColorHexParam,
              secondColorHex: secondColorHexParam,
              id: idParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [CloudsLocalEntity] entity fields to define ObjectBox queries.
class CloudsLocalEntity_ {
  /// see [CloudsLocalEntity.all]
  static final all =
      QueryIntegerProperty<CloudsLocalEntity>(_entities[0].properties[0]);

  /// see [CloudsLocalEntity.id]
  static final id =
      QueryIntegerProperty<CloudsLocalEntity>(_entities[0].properties[1]);
}

/// [CoordinateLocalEntity] entity fields to define ObjectBox queries.
class CoordinateLocalEntity_ {
  /// see [CoordinateLocalEntity.id]
  static final id =
      QueryIntegerProperty<CoordinateLocalEntity>(_entities[1].properties[0]);

  /// see [CoordinateLocalEntity.lon]
  static final lon =
      QueryDoubleProperty<CoordinateLocalEntity>(_entities[1].properties[1]);

  /// see [CoordinateLocalEntity.lat]
  static final lat =
      QueryDoubleProperty<CoordinateLocalEntity>(_entities[1].properties[2]);
}

/// [MainWeatherInfoLocalEntity] entity fields to define ObjectBox queries.
class MainWeatherInfoLocalEntity_ {
  /// see [MainWeatherInfoLocalEntity.id]
  static final id = QueryIntegerProperty<MainWeatherInfoLocalEntity>(
      _entities[2].properties[0]);

  /// see [MainWeatherInfoLocalEntity.temp]
  static final temp = QueryStringProperty<MainWeatherInfoLocalEntity>(
      _entities[2].properties[1]);

  /// see [MainWeatherInfoLocalEntity.feelsLike]
  static final feelsLike = QueryDoubleProperty<MainWeatherInfoLocalEntity>(
      _entities[2].properties[2]);

  /// see [MainWeatherInfoLocalEntity.tempMin]
  static final tempMin = QueryDoubleProperty<MainWeatherInfoLocalEntity>(
      _entities[2].properties[3]);

  /// see [MainWeatherInfoLocalEntity.tempMax]
  static final tempMax = QueryDoubleProperty<MainWeatherInfoLocalEntity>(
      _entities[2].properties[4]);

  /// see [MainWeatherInfoLocalEntity.pressure]
  static final pressure = QueryIntegerProperty<MainWeatherInfoLocalEntity>(
      _entities[2].properties[5]);

  /// see [MainWeatherInfoLocalEntity.humidity]
  static final humidity = QueryIntegerProperty<MainWeatherInfoLocalEntity>(
      _entities[2].properties[6]);
}

/// [SunsetSunriseLocalEntity] entity fields to define ObjectBox queries.
class SunsetSunriseLocalEntity_ {
  /// see [SunsetSunriseLocalEntity.type]
  static final type = QueryIntegerProperty<SunsetSunriseLocalEntity>(
      _entities[3].properties[0]);

  /// see [SunsetSunriseLocalEntity.id]
  static final id = QueryIntegerProperty<SunsetSunriseLocalEntity>(
      _entities[3].properties[1]);

  /// see [SunsetSunriseLocalEntity.country]
  static final country =
      QueryStringProperty<SunsetSunriseLocalEntity>(_entities[3].properties[2]);

  /// see [SunsetSunriseLocalEntity.sunrise]
  static final sunrise =
      QueryStringProperty<SunsetSunriseLocalEntity>(_entities[3].properties[3]);

  /// see [SunsetSunriseLocalEntity.sunset]
  static final sunset =
      QueryStringProperty<SunsetSunriseLocalEntity>(_entities[3].properties[4]);
}

/// [WeatherDescriptionLocalEntity] entity fields to define ObjectBox queries.
class WeatherDescriptionLocalEntity_ {
  /// see [WeatherDescriptionLocalEntity.id]
  static final id = QueryIntegerProperty<WeatherDescriptionLocalEntity>(
      _entities[4].properties[0]);

  /// see [WeatherDescriptionLocalEntity.main]
  static final main = QueryStringProperty<WeatherDescriptionLocalEntity>(
      _entities[4].properties[1]);

  /// see [WeatherDescriptionLocalEntity.description]
  static final description = QueryStringProperty<WeatherDescriptionLocalEntity>(
      _entities[4].properties[2]);

  /// see [WeatherDescriptionLocalEntity.icon]
  static final icon = QueryStringProperty<WeatherDescriptionLocalEntity>(
      _entities[4].properties[3]);
}

/// [WeatherInfoLocalEntity] entity fields to define ObjectBox queries.
class WeatherInfoLocalEntity_ {
  /// see [WeatherInfoLocalEntity.main]
  static final main =
      QueryRelationToOne<WeatherInfoLocalEntity, MainWeatherInfoLocalEntity>(
          _entities[5].properties[0]);

  /// see [WeatherInfoLocalEntity.visibility]
  static final visibility =
      QueryStringProperty<WeatherInfoLocalEntity>(_entities[5].properties[1]);

  /// see [WeatherInfoLocalEntity.wind]
  static final wind =
      QueryRelationToOne<WeatherInfoLocalEntity, WindInfoLocalEntity>(
          _entities[5].properties[2]);

  /// see [WeatherInfoLocalEntity.clouds]
  static final clouds =
      QueryRelationToOne<WeatherInfoLocalEntity, CloudsLocalEntity>(
          _entities[5].properties[3]);

  /// see [WeatherInfoLocalEntity.dt]
  static final dt =
      QueryStringProperty<WeatherInfoLocalEntity>(_entities[5].properties[4]);

  /// see [WeatherInfoLocalEntity.sys]
  static final sys =
      QueryRelationToOne<WeatherInfoLocalEntity, SunsetSunriseLocalEntity>(
          _entities[5].properties[5]);

  /// see [WeatherInfoLocalEntity.timezone]
  static final timezone =
      QueryIntegerProperty<WeatherInfoLocalEntity>(_entities[5].properties[6]);

  /// see [WeatherInfoLocalEntity.id]
  static final id =
      QueryIntegerProperty<WeatherInfoLocalEntity>(_entities[5].properties[7]);

  /// see [WeatherInfoLocalEntity.name]
  static final name =
      QueryStringProperty<WeatherInfoLocalEntity>(_entities[5].properties[8]);

  /// see [WeatherInfoLocalEntity.weatherTheme]
  static final weatherTheme =
      QueryRelationToOne<WeatherInfoLocalEntity, WeatherThemeLocalEntity>(
          _entities[5].properties[9]);

  /// see [WeatherInfoLocalEntity.weather]
  static final weather = QueryRelationToMany<WeatherInfoLocalEntity,
      WeatherDescriptionLocalEntity>(_entities[5].relations[0]);
}

/// [WindInfoLocalEntity] entity fields to define ObjectBox queries.
class WindInfoLocalEntity_ {
  /// see [WindInfoLocalEntity.id]
  static final id =
      QueryIntegerProperty<WindInfoLocalEntity>(_entities[6].properties[0]);

  /// see [WindInfoLocalEntity.speed]
  static final speed =
      QueryStringProperty<WindInfoLocalEntity>(_entities[6].properties[1]);

  /// see [WindInfoLocalEntity.deg]
  static final deg =
      QueryIntegerProperty<WindInfoLocalEntity>(_entities[6].properties[2]);
}

/// [WeatherThemeLocalEntity] entity fields to define ObjectBox queries.
class WeatherThemeLocalEntity_ {
  /// see [WeatherThemeLocalEntity.id]
  static final id =
      QueryIntegerProperty<WeatherThemeLocalEntity>(_entities[7].properties[0]);

  /// see [WeatherThemeLocalEntity.firstColorHex]
  static final firstColorHex =
      QueryIntegerProperty<WeatherThemeLocalEntity>(_entities[7].properties[1]);

  /// see [WeatherThemeLocalEntity.secondColorHex]
  static final secondColorHex =
      QueryIntegerProperty<WeatherThemeLocalEntity>(_entities[7].properties[2]);
}
